#!/usr/bin/env bash
# Interactive Github Shell.
# Copyright (C) 2012 Henrique Moody <henriquemoody@gmail.com>.
#
# Authors
# =======
#   Henrique Moody <henriquemoody@gmail.com>
#
# Changelog
# =========
#   1.0.2   Created OSX compatibility
#   1.0.1   Update script structure
#   1.0.0   Base script
#

declare -r SCRIPT_NAME=$(basename "${0}")
declare -r SCRIPT_DIRECTORY=$(dirname "${0}")
declare -r SCRIPT_DESCRIPTION=$(sed -n 2p "${0}" |  sed -E 's/^# ?//g')
declare -r SCRIPT_VERSION=$(sed -n 11p "${0}" | awk '{print $2}')
declare -r SCRIPT_PROMPT="github> "
declare SCRIPT_VAR_USER=""
declare SCRIPT_VAR_PASS=""
declare SCRIPT_VAR_PROJ=""
declare -r SCRIPT_HELP="Usage: ${SCRIPT_NAME} [OPTIONS]
${SCRIPT_DESCRIPTION}

    -h, --help      Displays this help.
    -s, --set       Defines default values for variables (\"user\", \"password\", \"project\").
    -v, --version   Displays the version of the program.
    -u, --update    Self update ${SCRIPT_NAME}.

Report bugs to: henriquemoody@gmail.com."

# github_internal_echo MESSAGE [COLOR [DECORATION]] 
github_internal_echo()
{
    local message="${1}"
    local color="${2}"
    local decoration="${3}"

    if [ "${color}" == "" ]
    then
       color=0
    fi

    if [ "${decoration}" == "" ]
    then
        decoration="normal"
    fi

    echo -e "\033[${color}m${message}\033[0m"

}
# github_internal_set VARIABLE [ VALUE ]
github_internal_set()
{
    local label="${1}"
    local value="${2}"

    if [ "${label}" == "password" ] && [ "${value}" == "" ]
    then
        read -s -p "Type your password: " value
        echo ""

    elif [ "${value}" == "" ]
    then
        read -e -p "Value for ${label}: " value
    fi

    case "${label}" in 

        user)
            SCRIPT_VAR_USER="${value}"
        ;;

        password)
            SCRIPT_VAR_PASS="${value}"
        ;;

        project)
            SCRIPT_VAR_PROJ="${value}"
        ;;

        *)
          github_internal_echo "Invalid variable \"${label}\"." 31
          return 2

    esac

    return 0
}

# github_external_issue NUMBER [ PROJECT [ USER ] ]
github_external_issue()
{
    if [ -z "${1}" ]
    then
        echo "You should define a issue number. (See \"help\" for more information)" 
        return 2
    fi

    local number="${1}"
    local project="${2}"
    local user="${3}"
    local url

    if [ -z "${project}" ]
    then
        if [ -z ${SCRIPT_VARS["project"]} ]
        then
            github_external_set project
        fi
        project="${SCRIPT_VARS["project"]}"
    fi

    if [ -z "${user}" ]
    then
        if [ -z ${SCRIPT_VARS["user"]} ]
        then
            github_external_set user
        fi
        user="${SCRIPT_VARS["user"]}"
    fi

    url="https://api.github.com/repos/${user}/${project}/issues/${number}/comments"
    echo $url
    curl -L "${url}" | grep "body" | cut -d "\"" -f 4 | while read line 
    do
        echo "${line}"
        echo
    done

}
# github_external_set VAR [ VALUE ]
github_external_set()
{
    if [ -z "${1}" ]
    then
        github_internal_echo "user:      \c" 34
        github_internal_echo "${SCRIPT_VAR_USER}" 32 \
            || github_internal_echo "NULL" 31

        local password=$(echo ${SCRIPT_VAR_PASS} | tr '[:alnum:]' '*')
        github_internal_echo "password:  \c" 34
        github_internal_echo "${password}" 32 \
            || github_internal_echo "NULL" 31

        github_internal_echo "project:   \c" 34
        github_internal_echo "${SCRIPT_VAR_PROJ}" 32 \
            || github_internal_echo "NULL" 31

        return 0
    fi

    github_internal_set "${1}" "${2}" \
        && github_internal_echo "Value of \"${1}\" defined with sucess." 32
}
# github_shell
github_shell()
{
    github_internal_echo "Welcome to Github Shell - ${SCRIPT_VERSION}" 32
    github_internal_echo "${SCRIPT_DESCRIPTION}\n"

    while read -e -p "${SCRIPT_PROMPT}" input
    do

        if [ "${input}" == "" ]
        then
            continue
        fi

        command_name=$(echo "${input}" | awk '{print $1}')
        if [ "$(echo "${input}" | wc -w | awk '{print $1}')" != 1 ]
        then
            command_args=$(echo "${input}" | cut -d ' ' -f 2-)
        else
            command_args=""
        fi

		history -s "${input}"

        case "${command_name}" in

            set | issue | exit)
                github_external_${command_name} ${command_args}
            ;;

            *)
                github_internal_echo "Command \"${command_name}\" not found." 31 1>&2
                continue
            ;;

        esac

    done
}


while [ "${1}" != "" ]
do

    case "${1}" in

        -h | --help)

            github_internal_echo "${SCRIPT_HELP}"
            exit 0

        ;;

        -s | --set)

            echo "${2}"  | tr ','  '\n' | while read line
            do
                key="$(echo ${line} | cut -d '=' -f 1)"
                value="$(echo ${line} | cut -d '=' -f 2-)"
                github_external_set "${key}" "${value}"
            done

        ;;

        -V)

            github_internal_echo "${SCRIPT_VERSION}"
            exit 0

        ;;

        -v | --version)

            github_internal_echo "${SCRIPT_NAME} version ${SCRIPT_VERSION}"
            github_internal_echo "${SCRIPT_DESCRIPTION}"
            exit 0

        ;;

        -u | --update)


            TEMPORARY=/tmp/github-sh_$(date +%s)
            curl -L git.io/github-sh -o ${TEMPORARY}
            chmod +x ${TEMPORARY}
            HEAD_VERSION=$(${TEMPORARY} -V)
            if [ "${HEAD_VERSION}" ==  "${SCRIPT_VERSION}" ]
            then
                github_internal_echo "Nothing to update." 32
                github_internal_echo "The last version of ${SCRIPT_NAME} is ${HEAD_VERSION}."
                rm -f ${TEMPORARY}
                exit 0
            fi

            if [ ! -w "${0}" ]
            then
                github_internal_echo "You don't have permission to update ${SCRIPT_NAME}." 31 1>&2
                rm -f ${TEMPORARY}
                exit 3
            fi

            mv ${TEMPORARY} "${0}"
            github_internal_echo "Successfully updated of ${SCRIPT_VERSION} to ${HEAD_VERSION}" 32
            exit 0

        ;;

        *)

            if [ "${1}" != "" ]
            then
                github_internal_echo "${SCRIPT_HELP_MESSAGE}" 1>&2
                exit 2
            fi

        ;;

    esac

    shift 2

done

github_shell