#!/usr/bin/env bash
# Interactive Github Shell.
# Copyright (C) 2012 Henrique Moody <henriquemoody@gmail.com>.
#
# Authors
# =======
#   Henrique Moody <henriquemoody@gmail.com>
#
# Changelog
# =========
#   1.0.0   Base script
#

SCRIPT_NAME=$(basename "${0}")
SCRIPT_DESCRIPTION=$(sed -n 2p "${0}" |  sed -r 's/^# ?//g')
SCRIPT_VERSION=$(sed -n 11p "${0}" | awk '{print $2}')
SCRIPT_PROMPT="github> "

SCRIPT_HELP="Usage: ${SCRIPT_NAME} [OPTIONS]
${SCRIPT_DESCRIPTION}

    -h, --help      Displays this help.
    -s, --set       Defines default values for variables (\"user\", \"password\", \"project\").
    -v, --version   Displays the version of the program.
    -u, --update    Self update ${SCRIPT_NAME}.

Report bugs to: henriquemoody@gmail.com."

# Internal functions
declare -A github_vars=(
    ["user"]=""
    ["password"]=""
    ["project"]=""
)

__internal_set()
{
    local label="${1}"
    local value="${2}"

    if [ "${label}" == "password" ] && [ "${value}" == "" ]
    then
        read -s -p "Type your password: " value
        echo ""

    elif [ "${value}" == "" ]
    then
        read -e -p "Value for ${label}: " value
    fi

    github_vars["${label}"]="${value}"

    return 0
}

# External functions
SHELL_HELP="Usage: ${SCRIPT_NAME} [OPTIONS]
${SCRIPT_DESCRIPTION}

    help    Displays this help.

    set     Defines default values for variables:
                set VAR [ VALUE ]

    issue   Displays information about an issue
                issue NUMBER [ PROJECT [ USER ] ]
"

# set VAR [ VALUE ]
__external_set()
{
    if [ -z "${1}" ]
    then
        for key in "${!github_vars[@]}"; do
            value="${github_vars[${key}]}";
            if [ ${key} == "password" ]
            then
                value=$(echo "${value}" | tr '[:print:]' '*')
            fi
            echo "${key}: ${value}"
        done
        return 0
    fi

    __internal_set "${1}" "${2}" \
        && echo "Value of \"${1}\" defined with sucess."
}

# issue NUMBER [ PROJECT [ USER ] ]
__external_issue()
{
    if [ -z "${1}" ]
    then
        echo "You should define a issue number. (See \"help\" for more information)" 
        return 2
    fi

    local number="${1}"
    local project="${2}"
    local user="${3}"
    local url

    if [ -z "${project}" ]
    then
        if [ -z ${github_vars["project"]} ]
        then
            __external_set project
        fi
        project="${github_vars["project"]}"
    fi

    if [ -z "${user}" ]
    then
        if [ -z ${github_vars["user"]} ]
        then
            __external_set user
        fi
        user="${github_vars["user"]}"
    fi

    url="https://api.github.com/repos/${user}/${project}/issues/${number}/comments"
    echo $url
    curl -L "${url}" | grep "body" | cut -d "\"" -f 4 | while read line 
    do
        echo "${line}"
        echo
    done

}

# Github shell
__shell()
{
    while read -e -p "${SCRIPT_PROMPT}" input
    do
        command_name=$(echo "${input}" | awk '{print $1}')
        if [ "$(echo "${input}" | wc -w )" != 1 ]
        then
            command_args=$(echo "${input}" | cut -d ' ' -f 2-)
        else
            command_args=""
        fi

        case "${command_name}" in

            set | issue)
                __external_${command_name} ${command_args}
            ;;

            exit)
                echo "Bye!"
                exit 0
            ;;

            help)
                echo "${SHELL_HELP}"
                exit 0
            ;;

            *)
                echo "Command not found" 1>&2
                continue
            ;;

        esac

        history -s "${input}"

    done
}

while [ "${1}" != "" ]
do

    case "${1}" in

        -h | --help)

            echo "${SCRIPT_HELP}"
            exit 0

        ;;

        -s | --set)

            echo "${2}"  | tr ','  '\n' | while read line
            do
                key="$(echo ${line} | cut -d '=' -f 1)"
                value="$(echo ${line} | cut -d '=' -f 2-)"
                __external_set "${key}" "${value}"
            done

        ;;

        -V)

            echo "${SCRIPT_VERSION}"
            exit 0

        ;;

        -v | --version)

            echo "${SCRIPT_NAME} version ${SCRIPT_VERSION}"
            echo "${SCRIPT_DESCRIPTION}"
            exit 0

        ;;

        -u | --update)


            TEMPORARY=/tmp/github-sh_$(date +%s)
            curl -L git.io/github-sh -o ${TEMPORARY}
            chmod +x ${TEMPORARY}
            HEAD_VERSION=$(${TEMPORARY} -V)
            if [ "${HEAD_VERSION}" ==  "${SCRIPT_VERSION}" ]
            then
                echo "Nothing to update."
                echo "The last version of ${SCRIPT_NAME} is ${HEAD_VERSION}."
                rm -f ${TEMPORARY}
                exit 0
            fi

            if [ ! -w "${0}" ]
            then
                echo "You don't have permission to update ${SCRIPT_NAME}." 1>&2
                rm -f ${TEMPORARY}
                exit 3
            fi

            mv ${TEMPORARY} "${0}"
            echo "Successfully updated of ${SCRIPT_VERSION} to ${HEAD_VERSION}"
            exit 0

        ;;

        *)

            if [ "${1}" != "" ]
            then
                echo "${SCRIPT_HELP_MESSAGE}" 1>&2
                exit 2
            fi

        ;;

    esac

    shift 2

done

__shell